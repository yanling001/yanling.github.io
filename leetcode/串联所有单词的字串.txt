class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List ans=new ArrayList<String>(); 
        int count=0;
        if(s.length()<words.length*words[0].length()){
            return ans;
        }
        //现把words放入map集合
        HashMap<String,Integer> map=new HashMap<String,Integer>();
        for(String ss:words){
            if (s.indexOf(ss) < 0) return ans;//如果s里面不包含ss直接返回
            map.put(ss,map.getOrDefault(ss,0)+1 );//将出现的stringd放入map集合中并统计每个string出现的次数
        }
        for(int i=0;i<words[0].length();i++){//需要从0，1，2....words[0].lenght-1;来考虑。
            //滑动窗口
            int left,right;
            left=right=i;  //左右窗口的起始值
            HashMap<String,Integer> temap=new HashMap<String,Integer>();
            while(right+words[0].length()<=s.length()-1){
            String temp=s.substring(right,right+words[0].length());
            right=right+words[0].length();  //右窗口右移
            //判断 words中是否含有 temap；
            if(map.containsKey(temp)){//如果包含
             temap.put(temp,temap.getOrDefault(temp,0)+1);
             count++;
             while(temap.getOrDefault(temp,0) > map.getOrDefault(temp,0)){
                  String aa=s.substring(left,left+words[0].length());
                  temap.put(aa,temap.getOrDefault(aa,0)-1);
                  count--;
                  left+=words[0].length();
             }
            
            }else{//不包含
              left=right;
              temap.clear();
              count=0;
            }
             if(count==words.length) ans.add(left);
            }
          

        }
        return ans;
    }
}


/*
public static List<Integer> solution2(String s, String[] words) {
        List<Integer> res = new ArrayList<>();
        Map<String, Integer> wordsMap = new HashMap<>();
        if (s.length() == 0 || words.length == 0) return res;
        for (String word: words) {
            // 主串s中没有这个单词，直接返回空
            if (s.indexOf(word) < 0) return res;
            // map中保存每个单词，和它出现的次数
            wordsMap.put(word, wordsMap.getOrDefault(word, 0) + 1);
        }
        // 每个单词的长度， 总长度
        int oneLen = words[0].length(), wordsLen = oneLen * words.length;
        // 主串s长度小于单词总和，返回空
        if (wordsLen > s.length()) return res;
        // 只讨论从0，1，...， oneLen-1 开始的子串情况，
        // 每次进行匹配的窗口大小为 wordsLen，每次后移一个单词长度，由左右窗口维持当前窗口位置
        for (int i = 0; i < oneLen; ++i) {
            // 左右窗口
            int left = i, right = i, count = 0;
            // 统计每个符合要求的word
            Map<String, Integer> subMap = new HashMap<>();
            // 右窗口不能超出主串长度
            while (right + oneLen <= s.length()) {
                // 得到一个单词
                String word = s.substring(right, right + oneLen);
                // 有窗口右移
                right += oneLen;
                // words[]中没有这个单词，那么当前窗口肯定匹配失败，直接右移到这个单词后面
                if (!wordsMap.containsKey(word)) {
                    left = right;
                    // 窗口内单词统计map清空，重新统计
                    subMap.clear();
                    // 符合要求的单词数清0
                    count = 0;
                } else {
                    // 统计当前子串中这个单词出现的次数
                    subMap.put(word, subMap.getOrDefault(word, 0) + 1);
                    ++count;
                    // 如果这个单词出现的次数大于words[]中它对应的次数，又由于每次匹配和words长度相等的子串
                    // 如 ["foo","bar","foo","the"]  "| foobarfoobar| foothe"
                    // 第二个bar虽然是words[]中的单词，但是次数抄了，那么右移一个单词长度后 "|barfoobarfoo|the"
                    // bar还是不符合，所以直接从这个不符合的bar之后开始匹配，也就是将这个不符合的bar和它之前的单词(串)全移出去
                    while (subMap.getOrDefault(word, 0) > wordsMap.getOrDefault(word, 0)) {
                        // 从当前窗口字符统计map中删除从左窗口开始到数量超限的所有单词(次数减一)
                        String w = s.substring(left, left + oneLen);
                        subMap.put(w, subMap.getOrDefault(w, 0) - 1);      
                        // 符合的单词数减一
                        --count;
                        // 左窗口位置右移
                        left += oneLen;
                    }
                    // 当前窗口字符串满足要求
                    if (count == words.length) res.add(left);
                }
            }
        }
        return res;
    }
*/

