/*
给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

*/

class Solution {
 public List<TreeNode> generateTrees(int n) {
       if (n==0) {
           return new ArrayList<TreeNode>();
       }
       return buildtree(1,n);
}

    private List<TreeNode> buildtree(int start, int end) {
        List<TreeNode> ans=new ArrayList<>();
        if (start>end){
            ans.add(null);
          return ans;
        }
       //以任意的一个数为根节点
        for (int i=start;i<=end;i++){
            //构建它所有满足条件的左子树
            List<TreeNode> left=buildtree(start,i-1);
            //构建它的所有满足条件的右子树
            List<TreeNode> right=buildtree(i+1,end);
           //组合所有的结果
            for (TreeNode l:left)
                for (TreeNode r:right){
                    TreeNode node=new TreeNode(i);
                    node.left=l;
                    node.right=r;
                    ans.add(node);
                }
        }
        return ans;
    }
}