class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> ans=new ArrayList<List<String>>();
        List<String> temp=new ArrayList<String>();
        temp.add(beginWord);
        dfs(ans,temp,beginWord,endWord,wordList);
        return ans;
    }
    int min=Integer.MAX_VALUE;
    void dfs(List<List<String>> ans,List<String> temp,String beginWord,String endWord,List<String> wordList){
     //考虑出口 ： beginWord==endWord
     if(beginWord.equals(endWord)){
       if(min>temp.size()){
           ans.clear();
           ans.add(new ArrayList<String>(temp));
           min=temp.size();
           return;
       }
       if(min==temp.size()){
           ans.add(new ArrayList<String>(temp));
           return ;
       }
     }
       if(temp.size()>min) return;
      //递归条件
      for(int i=0;i<wordList.size();i++){
         if(temp.contains(wordList.get(i))) continue;
         if(ischange(beginWord,wordList.get(i))){
             temp.add(wordList.get(i));
             //递归调用
             dfs(ans,temp,wordList.get(i),endWord,wordList);
             //回溯
               temp.remove(temp.size() - 1);
         }
      }
     
    }
    boolean ischange(String a,String b){
        int count=0;
       for(int i=0;i<a.length();i++){
         if(a.charAt(i)!=b.charAt(i)){
             count++;
         }
         if(count>=2) return false;
       }
       return true;
    }
}