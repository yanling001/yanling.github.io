/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> all=new ArrayList<>();
         if(root==null){
           return all;
       }
       
         f(root,all);
        List<List<Integer>> ans=new ArrayList<>();
        for (int i=all.size()-1;i>=0;i--){
            ans.add(all.get(i));
        }
        return ans;

    }
     private static void f(TreeNode root, List<List<Integer>> all) {
       Queue<TreeNode> queue=new LinkedList<TreeNode>();
        TreeNode now=root;
        TreeNode last=root;

       queue.add(root);
        List list=new ArrayList();
        while(!queue.isEmpty()){
            TreeNode temp= queue.poll();
            list.add(temp.val);
            TreeNode tes=add(temp,queue);
            if(tes!=null)
                now=tes;
            if(temp==last){
                all.add(list);
                last=now;
                list=new ArrayList();
            }
        }

    }

    private static TreeNode add(TreeNode temp, Queue<TreeNode> queue) {
       if(temp.left!=null&&temp.right!=null){
           queue.add(temp.left);
           queue.add(temp.right);
           return temp.right;
       }
        if(temp.left!=null){
            queue.add(temp.left);
            return temp.left;
        }
        if(temp.right!=null){
            queue.add(temp.right);
            return temp.right;
        }
        return null;
    }

}